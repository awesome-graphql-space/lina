import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */

/* tslint:disable */ 
/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  currentUser: GQLUser;
}

export interface GQLUser {
  displayName: string;
  email?: string;
  mobile: string;
  password: string;
}

export interface GQLMutation {
  signup?: GQLUser;
}

export interface GQLCreateUserInput {
  username: string;
  displayName: string;
  email?: string;
  mobile?: string;
  password: string;
}

export interface GQLSubscription {
  profileUpdate?: GQLUser;
}

export type GQLJSON = any;

export type GQLDateTime = any;

export interface GQLINode {
  _id?: string;
  key: string;
  rev: string;
  createdAt?: GQLDateTime;
  updatedAt?: GQLDateTime;
}

/** Use this to resolve interface type INode */
export type GQLPossibleINodeTypeNames = ;

export interface GQLINodeNameMap {
  INode: GQLINode;
}

export interface GQLIEntity {
  _id?: string;
  key: string;
  rev: string;
  createdAt?: GQLDateTime;
  updatedAt?: GQLDateTime;
  username?: string;
}

/** Use this to resolve interface type IEntity */
export type GQLPossibleIEntityTypeNames = ;

export interface GQLIEntityNameMap {
  IEntity: GQLIEntity;
}

export interface GQLChangePasswordInput {
  oldPassword: string;
  newPassword: string;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  User?: GQLUserTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  Subscription?: GQLSubscriptionTypeResolver;
  JSON?: GraphQLScalarType;
  DateTime?: GraphQLScalarType;
  INode?: {
    __resolveType: GQLINodeTypeResolver
  };
  
  IEntity?: {
    __resolveType: GQLIEntityTypeResolver
  };
  
}
export interface GQLQueryTypeResolver<TParent = any> {
  currentUser?: QueryToCurrentUserResolver<TParent>;
}

export interface QueryToCurrentUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserTypeResolver<TParent = any> {
  displayName?: UserToDisplayNameResolver<TParent>;
  email?: UserToEmailResolver<TParent>;
  mobile?: UserToMobileResolver<TParent>;
  password?: UserToPasswordResolver<TParent>;
}

export interface UserToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToMobileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToPasswordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  signup?: MutationToSignupResolver<TParent>;
}

export interface MutationToSignupArgs {
  input?: GQLCreateUserInput;
}
export interface MutationToSignupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSignupArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSubscriptionTypeResolver<TParent = any> {
  profileUpdate?: SubscriptionToProfileUpdateResolver<TParent>;
}

export interface SubscriptionToProfileUpdateResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult;
}

export interface GQLINodeTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): ;
}
export interface GQLIEntityTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): ;
}